user = User.new(name: "test", email: email, password: "password")
user.save
user = User.new(name: "test", email: email, password: "password", activated: true)
user.save
user.errors.full_messages
email = "active2@example.com"
User.create(name: "active", email: email, password: "password", activated: false)
user = User.new(name: "test", email: email, password: "password", activated: true)
user.save
user
email = "active3@example.com"
User.create(name: "active", email: email, password: "password", activated: false)
user = User.new(name: "test", email: email, password: "password", activated: false)
user.save
exit
def _auth\
  @_auth ||= UserAuth::AuthToken.new(payload: { sub: _entity.id })\
end
  def cookie_token\
    {\
      value: _auth.token,\
      expires: Time.zone.at(_auth.payload[:exp]),\
      secure: Rails.env.production?,\
      http_only: true\
    }\
  end
  def authenticate\
    raise UserAuth.not_found_exception_class unless _entity.present? && _entity.authenticate(auth_params[:password])\
  end
  def not_found\
    head(:not_found)\
  end
user = User.find(1)
token = user.to_lifetime_token(2.hours)
User.from_token(token)
quit
user = User.find(1)
token = user.to_lifetime_token(2.hours)
exit
user = User.find(1)
token = user.to_lifetime_token(2.hours)
User.from_token(token)
User.from_lifetime_token(token)
User.from_lifetime_token(token)
exit
user = User.find(1)
token = user.to_lifetime_token(2.hours)
User.from_lifetime_token(token)
exit
User.all
exit
User.all
quit
user = user.find(1)
user = User.find(1)
user
user.password
user.password_digest
exit
User.all
exit
User.all
User.all
User.all
User.all
user = User.first
user
user.authenticate('password123')
user.authenticate('password')
exit
User.all
exit
User.all
exit
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2021-4-5-17:00')
eventpost
eventpost.user
eventpost.users
eventpost.user
eventpost.user.name
eventpost.save
eventpost
eventpost.errors.full_messages
eventpost.User
eventpost.user_id = 2
eventpost.save
User.all
User.all
exit
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2021-4-5-17:00')
eventpost.user.name
eventpost.user
eventpost.save
eventpost
exit
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2020-4-5-17:00')
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2020-4-5-17:00')
exit
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2020-4-5-17:00')
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2020-4-5-17:00')
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2020-4-5-17:00')
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2020-4-5-17:00')
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2020-4-5-17:00')
exit
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2020-4-5-17:00')
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2020-4-5-17:00')
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2020-4-5-17:00')
ecentpost
eventpost
eventpost.save
eventpost
record
user = User.new(name: "test", email: "test@example.com", password: "password")
user.save
exit
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2020-4-5-17:00')
eventpost
eventpost.save
eventpost.errors.full_messages
eit
exit
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2020-4-5-17:00')
eventpost.save
exit
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2020-4-5-17:00')
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2020-4-5-17:00')
eventpost.save
exit
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2020-4-5-17:00')
eventpost.save
user = User.new(name: "test", email: "test@example.com", password: "password")
user.save
exit
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2020-4-5-17:00')
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2020-4-5-17:00')
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2020-4-5-17:00')
eventpost.save
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2020-4-5-17:00')
exit
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2020-4-5-17:00')
eventpost.save
Eventpost.all
exit
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2020-4-5-17:00')
eventpost.save
eventpost.errors.full_messages
exit
post = FactoryBot.create(:eventpost)
post
post.name
post.user
post = FactoryBot.build(:eventpost)
post
exit
post = FactoryBot.build(:eventpost)
post.save
exit
Faker::Dessert.variety
Faker::Address.city
Faker::Address.street_name
Faker::Hacker.say_something_smart
Faker::Hacker.say_something_smart
Faker::Hacker.say_something_smart
exit
Faker::Hacker.say_something_smart
exitFaker::Name
Faker::Name
Faker::Name.name
Faker::Lorem.sentence
Faker::Lorem.sentence
Faker::Hacker.sentence
Faker::Lorem.sentence
faker list -v
exit
Faker::Lorem.paragraph(sentence_count = 3)
Faker::Lorem.paragraph(sentence_count = 3)
Faker::Hacker
Faker::Hacker.\
\
ff
Faker::Hacker.sentence
Faker::Hacker.berb
Faker::Hacker.verb
Faker::Lorem.sentence
Faker::Lorem.paragraph(sentence_count = 3)
exit
Faker::FunnyName.name
Faker::FunnyName.name
Faker::FunnyName.name
Faker::Date.date
Faker::Date.name
Faker::Time.between(from: DateTime.now - 1, to: DateTime.now, format: :short)
Faker::Time.between(from: DateTime.now - 1, to: DateTime.now, format: :default)
Faker::Time.between(from: DateTime.now,  format: :default)
Faker::Time.forward(days: 23, period: :morning)
Faker::Time.forward(days: 23)
Faker::Time.forward(days: 23)
Faker::Time.forward(days: 23)
Faker::Time.forward(year: 1)
Faker::Time.forward(years: 1)
Faker::Time.forward(years: 2)
Faker::Time.forward(month: 2)
Faker::Time.forward(mounth: 2)
Faker::Time.forward(days: 100)
exit
Faker::Time.forward(days: 100).floor_to(15.minutes)
Faker::Time.forward(days: 100).floor_to(30.minutes)
Faker::Time.forward(days: 100).floor_to(30.minutes)
exit
Faker::Team.name
Faker::Team.name
Faker::Team.name
Faker::Team.name
Faker::Superhero.name
Faker::Superhero.name
Faker::Superhero.name
exit
posts = Eventpost.all
posts
exit
eventposts = Eventpost.all
eventposts
eventposts.q
eventposts.user
eventposts.name
eventposts.event_name
eventposts.all
eventposts.user_id
eventposts.to_a
Eventpost.all.user_id
eventposts.user_id
eventpost.user_id
eventposts.each do |eventpost|\
  puts eventpost.user\
end
eventposts.each do |eventpost|\
  eventpost.user.name\
end
eventposts.each do |eventpost|\
  post_user = eventpost.user.name\
end
post_user
users = User.all
users.Eventpost.all
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2020-4-517:00')
eventpost
eventpost.save
eventpost.errors.full_messages
eventpost = Eventpost.new(content: 'roremipsum', user_id: 1, event_name: 'sample', event_date: '2020-4-5-17:00')
eventpost
exit
eventpost = Eventpost.new(content: '', user_id: 1, event_name: '', event_date: '')
eventpost.save
eventpost.errors[:content]
eventpost.errors[:content].full_messages
eventpost.errors.content
eventpost.errors.details[:content]
eventpost.errors.full_messages
eventpost.errors.messages
eventpost.errors.messages[:content]
eventpost.errors.full_messages[:content]
eventpost.errors.full_messages_for(:content)
eventpost.errors.full_messages_for(:event_name)
eventpost.errors.full_messages_for(:event_date)
eventpost.errors.full_messages_for(:event_date).to_s
eventpost.errors.full_messages_for(:event_date).join(",")
feed_items = current_user.feed
user = User.first
feed_items = user.feed
feed_items = user.Eventpost.where("user_id = ?", id)
feed_items = Eventpost.where("user_id = ?", id)
feed_items = user.Eventpost.where("user_id = ?", id)
feed_items = user.eventposts
feed_items
feed_items.user
feed_items.user_id
feed_items.each do |feed_item|\
  puts feed_item\
end
feed_items.each do |feed_item|\
 puts feed_item.user\
end
Eventpost.user
Eventpost.all.user
Eventpost.first.user
exit
user.eventposts.build(event_name: '', content: '', event_date: '')
user = User.first
user.eventposts.build(event_name: '', content: '', event_date: '')
eventpost = user.eventposts.build(event_name: '', content: '', event_date: '')
evetnpost.errors.full_messages
eventnpost.errors.full_messages
eventpost.errors.full_messages
eventpost.save
eventpost.errors.full_messages
exit
eventpost = Eventpost.first
eventpost = 
eventpost = Eventpost.find_by(id: 109)
eventpost.image_url
eventpost = Eventpost.all
eventpost.image_url
exit
user = User.first
other_user = User.second
user.active_relationships.create(followed_id: other_user.id)
active_relationship.follower
active_relationship.followed
user.active_relationship.follower
active_relationship.follower

active_relationships.followed
exit
user = User.first
other_user = User.second
active_relationship = user.active_relationships.create(followed_id: other_user.id)
other_user = User.third
active_relationship = user.active_relationships.create(followed_id: other_user.id)
active_relationship.follower
active_relationships.followed
active_relationship.followed
exit
User.first.followers.count
User.first.following.count
exit
ENV['AWS_ACCESS_KEY_ID']
['AWS_SECRET_ACCESS_KEY']
ENV['AWS_SECRET_ACCESS_KEY']
exit
TestMailer.test.deliver_now
TestMailer.test.deliver_now
TestMailer.test.deliver_now
exit
TestMailer.test.deliver_now
user = User.create(name: 'daichi', email: 'kdai18.kuu@gmail.com', password:'password', user_name: 'user_name')
user.send_email_for(account_activation)
user.send_email_for(:account_activation)
exit
Relationship.find(id: 1).followed
Relationship.find(1).followed
Relationship.find(1)
user = User.find_by(user_name: user0user_name)
user = User.find_by(user_name: 'user0user_name')
user
user2 = User.second
user2
user.follow(user)
user.follow(user2)
user.unfollow(user2)
user.unfollow(user2)
exit
Relationship.new
Relationship.create
user
user = User.first
user2 = User.second
user.follow(user2)
user.unfollow(user2)
user.unfollow
user.following
user.follow(user2)
user.following
exit
User.first.following
User.first.following.id
 User.first.following.map(&:id)
User.first.following_ids
User.first.eventposts_ids
User.first.eventpost_ids
User.first.eventpost_contents
User.first.eventpost_event_name
User.first.eventpost_event_names
User.first.eventposts.map(&:content)
exit
eit
exit
Faker::Alphanumeric
Faker::Alphanumeric.name
exit
exit
user = User.first
user.avatar
exit
user = User.first
user.my_json
user = User.first.my_json
user
user.following
user = User.first
user.following
users = user.following
users.map!{|user| user.avatar_url }
users.map{|user| user.avatar_url }
exit
user = User.first
user.avatar = ''
user.errors.full_messages
user.save
user.errors.full_messages
exit
eventpost = Eventpost.find_by(id: 100)
eventpost
eventpost.id
user = User.first
user
user.likes
user.likes.create(eventpost_id: 2)
user.likes.create(eventpost_id: 4)

user.likes.include?(eventpost)
user.likes.include?(eventpost.id)
user.already_liked?(eventpost)
eventpost.
user.already_liked?(eventpost)
eventpost = Eventpost.third
user.already_liked?(eventpost)
eventpost
eventpost = Eventpost.find(2)
eventpost
user.already_liked?(eventpost)
user.likes.include?(eventpost)
user.likes
eventpost
user.already_liked?(eventpost)
user.already_liked?(eventpost)
user.followig
user.following
user.likes
eventpost
user.likes.include?(eventpost)
user.likes.include?(eventpost.id)
user.liked_eventpost.include?(eventpost)
user.liked_eventposts.include?(eventpost)
user.already_liked?(eventpost)
exit
user = User.first
eventpost = Eventpost.find(2)
user.already_liked?(eventpost)
eventpost = Eventpost.find(7)
user.already_liked?(eventpost)
exit
user = User.first
user.liked_eventpost
user.liked_eventposts
exit
user = User.first
user.liked_eventposts
user.likes.create(eventpost_id: 1)
user.liked_eventposts
user.liked_eventposts
user.likes
user.liked_eventposts
exit
like = Like.find_by(eventpost_id: 1, user_id: 1)
like
like.destroy
like
user = User.first
user.likes
user.likes.create(eventpost_id:1)
eventpost
user.likes
like = Like.find_by(eventpost_id: 1, user_id: 1)
laik
laike
like
like.destroy
user.likes
user.likes.reload
exit
user = USer.first
user = User.first
eventpost = Eventpost.find(3)
user.likes.create(eventpost)
user.likes.create(eventpost_id: eventpost.id)
exit
comment = current_user.comments.new(content: 'コメントしました')
user = User.first
comment = user.comments.new(content: 'コメントしました', eventpost_id: '50')
comment
comment.save
user = User.second
comment = user.comments.new(content: 'コメントしましたね', eventpost_id: '50')
comment.save
exit
user = User.first
exit
user,all
User.all
exit
User.all
exit
user = User.first
user.schedules.create(eventpost_id: 3)
user.schedules.create(eventpost_id: 5)
user.schedules.create(eventpost_id: 10)
schedules = Schedule.where(user_id: 1)
schedules
hirb.enable
Hirb.enable
schedules
schedules.as_json(include: [:user, :eventpost])
exit
Schedule.all
Hirb.enable
Schedule.all
user = User.first
user.schedules.create(eventpost_id: 6)
Schedule.all
user.schedules.create(eventpost_id: 2)
Schedule.all
Like.filter_by_post(1).select(:id, :user_id, :eventpost_id)
render json: Like.filter_by_post(1).select(:id, :user_id, :eventpost_id)
json: Like.filter_by_post(1).select(:id, :user_id, :eventpost_id)
Like.filter_by_post(1).select(:id, :user_id, :eventpost_id).as_json
exit
schedules = Schedule.where(user_id: current_user.id)
user = User.first
schedules = Schedule.where(user_id: user.id)
schedules
schedules.slice(0,2)
Eventpost.all
Hirb.enable
Eventpost.all
exit
