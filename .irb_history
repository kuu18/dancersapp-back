Rails.autoloaders.zeitwerk_enabled?
exit
Hirb::View.enabled?
puts Hirb::Helpers::Table.render [[1,2], [2,3]]
puts Hirb::Helpers::Table.render [{:age=>10, :weight=>100}, {:age=>80, :weight=>500}]
Hirb::View.width
`tput cols`.to_i
Hirb::View.resize(112)
exit
user = User.new(name: "test", email: "test@example.com", password: "password")
user.save
exit
domain = "@example.com"
email = "a" * (256 - domain.length) + domain
email.length
user = User.new(name: "test", email: email, password: "password")
user = User.new(name: "test", email: email, password: "password")
user.save
user.errors.full_messages
user.save
exit
I18n.t("activerecord.attributes.user")
user.password = "ああああああああ"
user = User.new
user.password = "ああああああああ"
user.save
user.errors.full_messages
domain = "@example.com"
email = "a" * (256 - domain.length) + domain
email.length
user = User.new(name: "test", email: email, password: "password")
user.save
user.errors.full_messages
email = "test@example@com"
user.email = email
user.save
user.errors.full_messages
email = "TEST@test.COM"
user = User.new(name: "test", email: email, password: "password")
user.save
user.email
exit
user = User.new(name: "  ")
user.save
user.errors.fullmessages
user.errors.full_messages
user
user = User.new(name: "  ", email: "test@example.com", password: "password", password_confirmation: "password")
user.save
user.errors.full_messages
user.name = "a"*51
user.save
user.errors.full_messages
user.email = "  "
user.save
user.errors.full_messages
user.email = nil
user.save
user.save
user.email = nil
user.save
nil.downcace
'a' * 243 + '@example.com'.lngth
user.email = 'a' * 243 + '@example.com'
user.email.length
user.email = nil
user.email.downcace
user.email = 'a' * 244 + '@example.com'
user.save
user.errors.full_messages
rails db console
exit
user = User.new(name: "  ", email: "test@example.com", password: "password", password_confirmation: "password")
user.password = nil
user.save
user.errors.full_messages
user.password = ''
user.save
user.errors.full_messages
user.password = ' '
user.save
user.errors.full_messages
user.password = ''
user.save
user.errors.full_messages
user.password = ''
user.errors.full_messages
user.save
user.errors.full_messages
user.password = ''
user.save
user.errors.full_messages
user.password = ' '
user.save
user.errors.full_messages
user.password = nil
user.save
user.errors.full_messages
user.password = ' '
user.save
user.errors.full_messages
exit
User.all
exit
payload = { sub: 1 }
secret_key = Rails.application.credentials.secret_key_base
token = JWT.encode(payload, secret_key)
token
JWT.decode(token, secret_key)
token += "A"
JWT.decode(token, secret_key)
exit
token = UserAuth::AuthToken.new.token
token
token = UserAuth::AuthToken.new(payload: {sub: 1}).token
UserAuth::AuthToken.new(token: token)
UserAuth::AuthToken.new(token: token).payload
exit
user = User.find(1)
user
token = user.to_token
token
User.from_token(token)
user.to_lifetime_token(2.hours)
token = user.to_lifetime_token(2.hours)
payload = UserAuth::AuthToken.new(token: token[:token]).payload
Time.at(payload["exp"])
"#{token[:lifetime_text]}以内に認証してください。"
exit
user - User.first
user = User.first
user
user.my_json
Time.from.now
Time.now
exit
user = User.first
user
token = user.to_token
toke
token
payload = UserAuth::AuthToken.new(token: token).payload
payload
payload["exp"]
payload.exp
payload
exit
user = User.new(name: "test", email:"kfhf@kdjfk.fjdf", password: "password", password_confirmation: "password")
user
user.id = 1
user
user.to_token
token = user.to_token
payload = UserAuth::AuthToken.new(token: token).payload
payload
exit
Time.at(Time.now.to_i)
Time.at(Time.now.to_i)
t.usec
t = Time.at(Time.now.to_i)
t.usec
SEC_PER_MIN = 60
Time.at(t.to_i / SEC_PER_MIN * SEC_PER_MIN)
Time.at(t.to_i / SEC_PER_MIN * SEC_PER_MIN)
exit
User.all
exit
user = User.find(1)
user
token = user.to_token
token
User.from_token(token)
user.to_lifetime_token(2.hours)
payload = UserAuth::AuthToken.new(token: token[:token]).payload
token = user.to_lifetime_token(2.hours)
payload = UserAuth::AuthToken.new(token: token[:token]).payload
Time.at(payload["exp"])
payload["exp"]
"#{token[:lifetime_text]}以内に認証してください。"
exit
